[tool.poetry]
name = "torchlite"
version = "0.0.0"
description = "Torchlite API backend service"
authors = [
  "capitanu <capitanu@illinois.edu>",
]
readme = "README.md"
packages = [{include = "htrc"}]
repository = "https://github.com/htrc/torchlite-backend"

[tool.poetry-dynamic-versioning]
enable = true
vcs = "git"
style = "pep440"
dirty = true

[tool.poetry.dependencies]
python = "^3.11"
fastapi = {extras = ["full"], version = "^0.109.1"}
uvicorn = {extras = ["standard"], version = "^0.23.2"}
fastapi-healthchecks = "^1.0.7"
authlib = "^1.2.1"
python-dotenv = "^1.0.0"
motor = "^3.3.1"
httpx = "^0.25.0"
pydantic = "^2.4.2"
regex = "^2023.10.3"
ruamel-yaml = "^0.17.35"

[tool.poetry.group.test.dependencies]
pytest = "^7.2.2"
pytest-asyncio = "^0.18.3"
pytest-cov = "^3.0.0"
pytest-html = "^3.1.1"
pytest-lazy-fixture = "^0.6.3"
coverage = { version = "^7.0.5", extras = ["toml"]}
Faker = "^13.11.0"
tox = "^4.0.0"

[tool.poetry.group.lint.dependencies]
ruff = "^0.0.262"
black = "^23.3.0"
mypy = "^0.950"
pyflakes = "^3.0.1"
types-requests = "^2.28.11.17"
types-setuptools = "^67.6.0.8"
types-ujson = "^5.7.0.3"
types-pyyaml = "^6.0.12.9"

[tool.poetry.group.docs.dependencies]
sphinx = "*"
sphinx-autodoc-typehints = "*"

[tool.mypy]
no_implicit_optional = true
show_error_codes = true
warn_unused_ignores = true
disallow_untyped_defs = true

[[tool.mypy.overrides]]
module = [
  "fastapi_healthchecks.api.router.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -vl --tb=native --junitxml=test-results/junit.xml --html test-results/report.html --self-contained-html --cov --cov-report html --cov-report xml --cov-report term"
markers = [
  "integration: mark a test as integration",
  "unit: mark a test as a unit test",
  "slow: mark a test as being slow",
]
testpaths = ["tests"]
norecursedirs = [
  ".eggs",
  ".pytest_cache",
  ".xprocess",
  ".git",
  "tests/test-data",
  "test/test-cases",
  ".tox",
  ".toxenv",
  ".toxenv38",
  ".toxenv39",
  "*site-packages*",
]
asyncio_mode = "auto"

[tool.coverage.run]
source = ["htrc"]

[tool.coverage.xml]
output = "test-results/coverage/cov.xml"

[tool.coverage.html]
directory = "test-results/coverage/cov_html"

[tool.coverage.report]
# Regexes for lines to exclude from consideration
exclude_lines = [
  # Have to re-enable the standard pragma
  'pragma: no cover',

  # Don't complain about missing debug-only code:
  'def __repr__',
  'if self\.debug',

  # Don't complain if tests don't hit defensive assertion code:
  'raise AssertionError',
  'raise NotImplementedError',

  # Don't complain if non-runnable code isn't run:
  'if 0:',
  'if __name__ == .__main__.:',
]

[tool.tox]
legacy_tox_ini = """
[tox]
min_version = 4.0
envlist = py{311}, ruff, mypy, pyflakes
skipsdist = true
requires = poetry==1.7.1

[testenv]
description = run the tests with {basepython}
allowlist_externals =
    mkdir
    poetry
commands_pre =
commands =
    poetry install --no-interaction --no-root --without=lint,docs --sync
    mkdir -p test-results
    poetry run pytest {posargs} --junit-xml test-results/{envname}/junit.xml --cov-report html:test-results/{envname}/coverage/cov_html --cov-report xml:test-results/{envname}/coverage/cov.xml --html=test-results/{envname}/report.html

[testenv:ruff]
description = perform style checking
commands =
    poetry install --no-interaction --no-root --only=lint
    poetry run ruff htrc tests

[testenv:mypy]
description = perform type checking
commands =
    poetry install --no-interaction --no-root --only=lint
    poetry run mypy .

[testenv:pyflakes]
description = perform error checking
commands =
    poetry install --no-interaction --no-root --only=lint
    poetry run pyflakes htrc tests

[testenv:docs]
description = invoke sphinx-build to build the HTML docs
basepython = python3.11
deps = sphinx
       sphinx-autodoc-typehints
commands =
    poetry install --no-interaction --no-root --only=docs
    sphinx-build docs/sphinx/source html-doc --color -bhtml {posargs}
    python -c 'import pathlib; print("documentation available under html-docs/index.html")'
"""

[tool.black]
line-length = 120
target-version = ['py311']

[tool.ruff]
# Same as Black.
line-length = 120
target-version = 'py311'

[build-system]
requires = ["poetry-core>=1.0.0", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"
